import { Options, SqliteDriver } from "@mikro-orm/sqlite";
import { TsMorphMetadataProvider } from "@mikro-orm/reflection";
import { Queue } from "./entity/Queue.js";
import { Video } from "./entity/Video.js";

const ormConfig: Options = {
  // for simplicity, we use the SQLite database, as it's available pretty much everywhere
  driver: SqliteDriver,
  // dbName: "./novia.db",

  // folder-based discovery setup, using common filename suffix
  entities: [Queue, Video], // we will use the ts-morph reflection, an alternative to the default reflect-metadata provider
  // check the documentation for their differences: https://mikro-orm.io/docs/metadata-providers
  metadataProvider: TsMorphMetadataProvider,
  // enable debug mode to log SQL queries and discovery information
  debug: false,
  /*
  metadataCache: {
    enabled: true,
    adapter: GeneratedCacheAdapter,
    options: {
      data: {
        Queue: {
          _id: 0,
          properties: {
            id: { name: "id", kind: "scalar", primary: true, type: "number", array: false, runtimeType: "number" },
            type: {
              name: "type",
              kind: "scalar",
              default: "download",
              getter: false,
              setter: false,
              type: '"download" | "extendmetadata" | "createHashes" | "nostrUpload"',
              array: false,
              runtimeType: '"download" | "extendmetadata" | "createHashes" | "nostrUpload"',
            },
            url: {
              name: "url",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            owner: {
              name: "owner",
              kind: "scalar",
              default: "local",
              getter: false,
              setter: false,
              type: "string",
              runtimeType: "string",
              array: false,
            },
            status: {
              name: "status",
              kind: "scalar",
              default: "queued",
              getter: false,
              setter: false,
              type: "string",
              runtimeType: '"queued" | "completed" | "failed" | "processing"',
              array: false,
            },
            errorMessage: {
              name: "errorMessage",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            addedAt: {
              name: "addedAt",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "Date",
              array: false,
              runtimeType: "Date",
            },
            processedAt: {
              name: "processedAt",
              kind: "scalar",
              nullable: true,
              getter: false,
              setter: false,
              type: "Date",
              array: false,
              runtimeType: "Date",
              optional: true,
            },
          },
          primaryKeys: ["id"],
          filters: {},
          hooks: {},
          indexes: [],
          uniques: [],
          className: "Queue",
          path: "./dist/entity/Queue.js",
          name: "Queue",
          abstract: false,
          internal: true,
          constructorParams: [],
          toJsonParams: [],
          useCache: true,
          compositePK: false,
          simplePK: true,
          collection: "queue",
        },
        Video: {
          _id: 1000,
          properties: {
            id: { name: "id", kind: "scalar", primary: true, type: "uuid", array: false, runtimeType: "string" },
            store: {
              name: "store",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            videoPath: {
              name: "videoPath",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            videoSha256: {
              name: "videoSha256",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            infoPath: {
              name: "infoPath",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            infoSha256: {
              name: "infoSha256",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            thumbPath: {
              name: "thumbPath",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            thumbSha256: {
              name: "thumbSha256",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            addedAt: {
              name: "addedAt",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "Date",
              runtimeType: "Date",
              array: false,
            },
            externalId: {
              name: "externalId",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            source: {
              name: "source",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            category: {
              name: "category",
              kind: "scalar",
              type: "text[]",
              nullable: true,
              getter: false,
              setter: false,
              array: true,
              runtimeType: "string[]",
              optional: true,
            },
            channelId: {
              name: "channelId",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            channelName: {
              name: "channelName",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
            dateDownloaded: {
              name: "dateDownloaded",
              kind: "scalar",
              type: "bigint",
              getter: false,
              setter: false,
              array: false,
              runtimeType: "number",
            },
            duration: {
              name: "duration",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              array: false,
              runtimeType: "number",
            },
            description: {
              name: "description",
              kind: "scalar",
              type: "text",
              getter: false,
              setter: false,
              array: false,
              runtimeType: "string",
            },
            mediaSize: {
              name: "mediaSize",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              array: false,
              runtimeType: "number",
            },
            published: {
              name: "published",
              kind: "scalar",
              type: "date",
              getter: false,
              setter: false,
              array: false,
              runtimeType: "Date",
            },
            tags: {
              name: "tags",
              kind: "scalar",
              type: "text[]",
              nullable: true,
              getter: false,
              setter: false,
              array: true,
              runtimeType: "string[]",
              optional: true,
            },
            title: {
              name: "title",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            vidType: {
              name: "vidType",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              array: false,
              runtimeType: "string",
            },
            likeCount: {
              name: "likeCount",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              default: 0,
              array: false,
              runtimeType: "number",
            },
            viewCount: {
              name: "viewCount",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              default: 0,
              array: false,
              runtimeType: "number",
            },
            ageLimit: {
              name: "ageLimit",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              default: 0,
              array: false,
              runtimeType: "number",
            },
            width: {
              name: "width",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              default: 0,
              array: false,
              runtimeType: "number",
            },
            height: {
              name: "height",
              kind: "scalar",
              type: "integer",
              getter: false,
              setter: false,
              default: 0,
              array: false,
              runtimeType: "number",
            },
            event: {
              name: "event",
              kind: "scalar",
              getter: false,
              setter: false,
              type: "string",
              default: "",
              runtimeType: "string",
              array: false,
            },
          },
          primaryKeys: ["id"],
          filters: {},
          hooks: {},
          indexes: [],
          uniques: [],
          className: "Video",
          path: "./dist/entity/Video.js",
          name: "Video",
          abstract: false,
          internal: true,
          constructorParams: [],
          toJsonParams: [],
          useCache: true,
          compositePK: false,
          simplePK: true,
          collection: "video",
        },
      },
    },
  },*/
};

export default ormConfig;
